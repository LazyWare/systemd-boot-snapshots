#!/bin/sh
# 
# File: systemd-boot-snapshots-notify
# Project Path: ./systemd-boot-snapshots-notify
# Installation Path: /usr/lib/systemd-boot-snapshots/systemd-boot-snapshots-notify
#
# This script provides desktop notifications when booting into a snapshot
# Works across different desktop environments in Arch Linux and derivatives
# Supports both Timeshift and Snapper snapshot systems

set -e

# Notification content
notification_title='Snapshot restore mode'
notification_icon='dialog-warning'
notification_header='This is a snapshot session!'
notification_description='Changes to the system will be discarded after a reboot.
Changes to your home folder might be persistent, depending on your configuration.
If you want to restore this snapshot permanently, use a snapshot tool like Timeshift or Snapper.'

# Runtime directories
tmp_dir="/tmp/systemd-boot-snapshots"
pid_file="${tmp_dir}/systemd-boot-snapshots-notify.pid"

# Function to clean up processes and files
cleanup() {
    if [ -f "$pid_file" ]
    then
        pid="$(cat $pid_file)"
        kill "$pid"
        rm -f "$pid_file"
    fi

    [ -d "$tmp_dir" ] && rmdir --ignore-fail-on-non-empty "$tmp_dir"
}

# Ensure cleanup happens on exit
trap cleanup EXIT

# Get snapshot type from arguments (timeshift or snapper)
snapshot_type="$1"

# Set up action for notification buttons
action_reply="start_snapshot_program"
action_button="[]"
action_program=""

# Configure specific snapshot tool actions based on type
if [ "$snapshot_type" = "timeshift" ]
then
    action_program="timeshift-launcher"
    action_button="[\"${action_reply}\", \"Start Timeshift\"]"
elif [ "$snapshot_type" = "snapper" ]
then
    action_program="pkexec env DISPLAY="$DISPLAY" XAUTHORITY="$XAUTHORITY" snapper-gui"
    action_button="[\"${action_reply}\", \"Start Snapper\"]"
fi

# Function to send notification via different methods
# Tries multiple approaches for maximum compatibility
send_notification() {
    # First try GNOME/KDE notification via gdbus
    if command -v gdbus >/dev/null 2>&1; then
        dbus_call_cmd="gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify"
        
        # At startup the org.freedesktop.Notifications interface might not be available immediately
        # Keep trying for 10 seconds
        for i in $(seq 1 10)
        do
            set +e
            id=$($dbus_call_cmd -- "$notification_title" '0' "$notification_icon" "$notification_header" "$notification_description" "$action_button" '{"urgency": <byte 2>}' 'int32 -1')
            if [ "$?" -eq 0 ]
            then
                id="${id%,)}"
                id="${id#(uint32 }"
                if [ -z "${id##*[!0-9]*}" ]
                then
                    echo "Failed to send notification to org.freedesktop.Notifications.Notify"
                else
                    return 0
                fi
            fi
            sleep 1
        done
    fi
    
    # Try using notify-send as fallback
    if command -v notify-send >/dev/null 2>&1; then
        notify-send -u critical -i "$notification_icon" "$notification_title" "$notification_header\n\n$notification_description"
        return 0
    fi
    
    # Last resort, use zenity if available
    if command -v zenity >/dev/null 2>&1; then
        zenity --warning --title="$notification_title" --text="$notification_header\n\n$notification_description" &
        return 0
    fi
    
    echo "No notification method available"
    return 1
}

# Function to set up monitoring for notification responses
setup_notification_monitor() {
    local id="$1"
    
    if ! command -v gdbus >/dev/null 2>&1; then
        return 1
    fi
    
    # Parse DBus responses for notification events
    dbus_expr='\|^[[:space:]]*/org/freedesktop/Notifications:[[:space:]]\+org.freedesktop.Notifications.'
    mkdir -p "$tmp_dir"

    # Start the DBus monitor and capture its PID
    dbus_monitor_cmd="gdbus monitor --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications"
    {
        $dbus_monitor_cmd &
        echo $! >&3;
    } 3>"$pid_file" |
    while read -r line
    do
        set -e
        # Check if notification was closed
        closed_id="$(echo "$line" | sed "${dbus_expr}NotificationClosed[[:space:]]*(uint32[[:space:]]*$id,[[:space:]]*uint32[[:space:]]\+[0-9]\+[[:space:]]*)[[:space:]]*$|!d; s//$id/")"
        if [ -n "$closed_id" ]
        then
            exit
        fi

        # Check if action button was clicked
        action_id="$(echo "$line" | sed "${dbus_expr}ActionInvoked[[:space:]]*(uint32[[:space:]]*$id,[[:space:]]*'${action_reply}'[[:space:]]*)[[:space:]]*$|!d; s//$id/")"
        if [ -n "$action_id" ]
        then
            nohup $action_program > /dev/null &
            break
        fi
    done
}

# Main execution - send notification and set up action handling
send_notification
ID=$?

if [ $ID -eq 0 ] && [ -n "$action_program" ]; then
    setup_notification_monitor "$id"
fi1')
            if [ "$?" -eq 0 ]
            then
                id="${id%,)}"
                id="${id#(uint32 }"
                if [ -z "${id##*[!0-9]*}" ]
                then
                    echo "Failed to send notification to org.freedesktop.Notifications.Notify"
                else
                    return 0
                fi
            fi
            sleep 1
        done
    fi
    
    # Try using notify-send as fallback
    if command -v notify-send >/dev/null 2>&1; then
        notify-send -u critical -i "$notification_icon" "$notification_title" "$notification_header\n\n$notification_description"
        return 0
    fi
    
    # Last resort, use zenity if available
    if command -v zenity >/dev/null 2>&1; then
        zenity --warning --title="$notification_title" --text="$notification_header\n\n$notification_description" &
        return 0
    fi
    
    echo "No notification method available"
    return 1
}

# Function to set up monitoring for notification responses
setup_notification_monitor() {
    local id="$1"
    
    if ! command -v gdbus >/dev/null 2>&1; then
        return 1
    fi
    
    # Parse DBus responses for notification events
    dbus_expr='\|^[[:space:]]*/org/freedesktop/Notifications:[[:space:]]\+org.freedesktop.Notifications.'
    mkdir -p "$tmp_dir"

    # Start the DBus monitor and capture its PID
    dbus_monitor_cmd="gdbus monitor --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications"
    {
        $dbus_monitor_cmd &
        echo $! >&3;
    } 3>"$pid_file" |
    while read -r line
    do
        set -e
        # Check if notification was closed
        closed_id="$(echo "$line" | sed "${dbus_expr}NotificationClosed[[:space:]]*(uint32[[:space:]]*$id,[[:space:]]*uint32[[:space:]]\+[0-9]\+[[:space:]]*)[[:space:]]*$|!d; s//$id/")"
        if [ -n "$closed_id" ]
        then
            exit
        fi

        # Check if action button was clicked
        action_id="$(echo "$line" | sed "${dbus_expr}ActionInvoked[[:space:]]*(uint32[[:space:]]*$id,[[:space:]]*'${action_reply}'[[:space:]]*)[[:space:]]*$|!d; s//$id/")"
        if [ -n "$action_id" ]
        then
            nohup $action_program > /dev/null &
            break
        fi
    done
}

# Main execution - send notification and set up action handling
send_notification
ID=$?

if [ $ID -eq 0 ] && [ -n "$action_program" ]; then
    setup_notification_monitor "$id"
fi
