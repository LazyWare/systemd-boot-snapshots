#!/bin/sh
# 
# File: systemd-boot-mount-snapshot-modules
# Project Path: ./systemd-boot-mount-snapshot-modules
# Installation Path: /usr/lib/systemd-boot-snapshots/systemd-boot-mount-snapshot-modules
# 
# This script is responsible for mounting the necessary kernel modules
# when booting from a BTRFS snapshot in systemd-boot
#
# It handles cases where the kernel in the snapshot doesn't match
# the running kernel by mounting the modules from the parent subvolume

# Debug log function
debug_log() {
    if grep -q "debug_boot" /proc/cmdline; then
        echo "[systemd-boot-snapshots] $(date) - $1" >> /var/log/systemd-boot-snapshots-debug.log
    fi
}

# Start debug logging if enabled
if grep -q "debug_boot" /proc/cmdline; then
    # Ensure log directory exists
    mkdir -p /var/log
    echo "===============================================" > /var/log/systemd-boot-snapshots-debug.log
    echo "systemd-boot-snapshots debug log - $(date)" >> /var/log/systemd-boot-snapshots-debug.log
    echo "===============================================" >> /var/log/systemd-boot-snapshots-debug.log
    echo "Command line parameters:" >> /var/log/systemd-boot-snapshots-debug.log
    cat /proc/cmdline >> /var/log/systemd-boot-snapshots-debug.log
    echo "Environment:" >> /var/log/systemd-boot-snapshots-debug.log
    env | sort >> /var/log/systemd-boot-snapshots-debug.log
    echo "Mount points:" >> /var/log/systemd-boot-snapshots-debug.log
    mount >> /var/log/systemd-boot-snapshots-debug.log
    echo "LUKS devices:" >> /var/log/systemd-boot-snapshots-debug.log
    ls -l /dev/mapper/ >> /var/log/systemd-boot-snapshots-debug.log 2>&1
    echo "===============================================" >> /var/log/systemd-boot-snapshots-debug.log
fi

# Input parameters
root_device="$1"        # The root block device
root_mount="$2"         # The mount point of the root filesystem
root_flags="$3"         # Mount flags for the root filesystem
root_fstype="$4"        # Filesystem type of root (should be btrfs)

debug_log "Input parameters:"
debug_log "root_device: $root_device"
debug_log "root_mount: $root_mount"
debug_log "root_flags: $root_flags"
debug_log "root_fstype: $root_fstype"

# Get parent subvolume from kernel command line
parent_subvol="$(sed -n -e 's/.*\(parent_subvol=[^ ]*\).*/\1/; s/parent_subvol=//p' /proc/cmdline)"
debug_log "Parent subvolume: $parent_subvol"

# Runtime directories
run_dir="/run/systemd-boot-snapshots"
tmp_dir="/tmp/systemd-boot-snapshots"

# Helper function to trim whitespace from string
trim_whitespace() {
    local var="$*"
    var="${var#"${var%%[![:space:]]*}"}"   # remove leading whitespace characters
    var="${var%"${var##*[![:space:]]}"}"   # remove trailing whitespace characters
    printf "%s" "$var"
}

# Helper function to check if a string contains a pattern
strglobin() {
    [ -n "$1" -a -z "${1##*$2*}" ]
}

# Function to install the notification service that informs user they're in a snapshot
install_notifier_service()
{
    debug_log "Installing notification service..."
    # Detect snapshot type based on mount flags
    snapshot_type=""
    if strglobin "$root_flags" "[ ,]subvol=*.snapshots/[0-9]*/snapshot"; then
        snapshot_type="snapper"
        debug_log "Detected snapshot type: snapper"
    elif strglobin "$root_flags" "[ ,]subvol=*timeshift-btrfs/snapshots/[0-9][0-9][0-9][0-9]-[0-9]*/*"; then
        snapshot_type="timeshift"
        debug_log "Detected snapshot type: timeshift"
    fi

    # Set up systemd user service to show notification at desktop session start
    target="graphical-session.target"
    install_target="xdg-desktop-autostart.target"
    unit="[Unit]
Description=Notify user of snapshot mode
PartOf=$target
After=$target

[Service]
Type=exec
ExecStartPre=/usr/bin/install -D ${run_dir}/systemd-boot-snapshots-notify ${tmp_dir}/systemd-boot-snapshots-notify
ExecStart=${tmp_dir}/systemd-boot-snapshots-notify $snapshot_type
Restart=no
KillMode=process
Slice=app.slice

[Install]
WantedBy=$install_target
"
    # Create directories and copy notification script
    mkdir -p "$run_dir"
    cp "/bin/systemd-boot-snapshots-notify" "$run_dir"
    mkdir -p "/run/systemd/user/${install_target}.wants"
    echo "$unit" > "/run/systemd/user/systemd-boot-snapshots-notify.service"
    ln -s "/run/systemd/user/systemd-boot-snapshots-notify.service" "/run/systemd/user/${install_target}.wants/systemd-boot-snapshots-notify.service"
    debug_log "Notification service installed"
}

# Check for correct usage
if [ $# -ne 4 ]
then
    echo "Invalid usage: use systemd-boot-mount-snapshot-modules device mount flags fstype."
    exit 1
fi

# Ensure script is run as root
if command -v id > /dev/null && [ ! "$(id -u)" -eq 0 ]
then
    echo "Please run as root." >&2
    exit 1
fi

# Check if parent subvolume is defined
if [ -z "$parent_subvol" ]
then
    echo "No snapshot parent subvolume defined on the kernel command line."
    exit 1
fi

# Check if filesystem is btrfs
if [ "$root_fstype" != "btrfs" ]
then
    echo "Only btrfs is supported." >&2
    exit 1
fi

# Get running kernel version
kernel_version=$(uname -r)

# Check if the snapshot already has modules for this kernel
if [ -d "${root_mount}/lib/modules/${kernel_version}" ] && [ -f "${root_mount}/lib/modules/${kernel_version}/modules.dep" ]
then
    # This kernel version is supported in this snapshot, no need to mount modules
    install_notifier_service
    exit 0
fi

# Mount the root filesystem to access parent subvolume
mount_path="${run_dir}/root"
mkdir -p "$mount_path" 2>/dev/null
mount -o ro "$root_device" "$mount_path"

# Get the subvolume path from mount flags
root_subvol="${root_flags##*subvol=}"
root_subvol="${root_subvol%%,*}"
root_subvol="${root_subvol#/}"

# Handle auto-detection of parent subvolume if needed
if [ "$parent_subvol" = "auto" ]
then
    # Auto detect parent subvolume defined on the kernel command line
    NL='
'
    subvol_info="$(btrfs subvolume show "${mount_path}/${root_subvol}")"
    parent_uuid="${subvol_info##*Parent UUID:}"
    parent_uuid="${parent_uuid%%Received UUID:*}"
    parent_uuid="$(trim_whitespace "$parent_uuid")"
    parent_subvol_info="$(btrfs subvolume show -u "$parent_uuid" "${mount_path}/${root_subvol}")"
    parent_subvol="${parent_subvol_info%%"$NL"*}"
    if [ -z "$parent_subvol" ]
    then
        # Could not determine the snapshot parent
        # Now it's not possible to mount the modules
        # directory from the snapshot parent subvolume
        umount "$mount_path"
        echo "Could not determine the snapshot parent subvolume." >&2
        exit 1
    fi
fi

# Mount the kernel modules directory from the parent subvolume
mkdir -p "${root_mount}/lib/modules/${kernel_version}" 2>/dev/null
mount -o ro,bind "${mount_path}/${parent_subvol}/lib/modules/${kernel_version}" "${root_mount}/lib/modules/${kernel_version}"
umount "$mount_path"

# Set up notification service
install_notifier_service
